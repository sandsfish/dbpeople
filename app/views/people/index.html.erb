<style>
  svg {
    background-color: white;
    border: 1px solid gray;
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

  path:hover {
    stroke: rgb(30, 30, 30);
    stroke-width: 2px;
  }

  .highlight {
    stroke-width: 2px;
    stroke: rgb(70,130,180);
  }

  text {
    font-weight: bold
  }

  #searchbar {
    display: inline-block;
    margin-left: auto;
    margin-right: auto;
  }
</style>

<script type="text/javascript" src="assets/d3.v3.js"></script>
  <div style="width: 100%; text-align: center;">
  <div id="searchbar">
    <%= form_tag '/people', :method => :get do %>
      <%= text_field_tag 'person_uri', nil, :size => 75, :value => params[:person_uri] %>
      <%= submit_tag 'Analyze Influence', :class => 'button' %>
    <% end %>
  </div>
  </div>
  <% if params[:person_uri].nil? || params[:person_uri].empty? %>
	<span class="example_text">e.g. <a href="/people?person_uri=http%3A%2F%2Fdbpedia.org%2Fresource%2FNoam_Chomsky">http://dbpedia.org/resource/Noam_Chomsky</a></span>
  <% end %>
</div>

<div id="results-container">
  <div id="results">
    <div id="d3_timeline"/>

      <script type="text/javascript">

        d3.selection.prototype.moveToFront = function() {
          return this.each(function(){
            this.parentNode.appendChild(this);
          });
        };

        var influencedJSON = <%= @influencedJSON.html_safe unless @influencedJSON.nil? %>;
        var influencerJSON = <%= @influencersJSON.html_safe unless @influencersJSON.nil? %>;

        var svgHorizontalPadding = 120;

        // Just year formatting
        var dateFormatter = d3.time.format("%Y");

        // Data Setup
        var influencedData = influencedJSON.results.bindings;
        influencedData.sort( function(a,b) {
          return d3.ascending(new Date(a.influenceBirth.value), new Date(b.influenceBirth.value));
        });

        var influencerData = influencerJSON.results.bindings;
        influencerData.sort( function(a,b) {
          return d3.ascending(new Date(a.influenceBirth.value), new Date(b.influenceBirth.value));
        });

        // Check for empty data sets
        var doInfluencer = true;
        if(influencerData.length == 0) {
          doInfluencer = false;
        }

        var doInfluenced = true;
        if(influencedData.length == 0) {
          doInfluenced = false;
        }

        // Return unique years from list of individuals' birth years
        function getYears(data) {
          var influenceYears = data.map(function(obj) { return getBirthYear(obj); });
          return influenceYears.filter(function(v,i) { return influenceYears.indexOf(v) == i; });
        }

        // Gather unique influence years to aggregate individuals under
        var influencerYears = getYears(influencerData);
        var influencedYears = getYears(influencedData);

        var primaryColor = "rgb(70,130,180)"

        // Main SVG Canvas
        var svgWidth = 1200;
        var svgHeight = 500;
        var focusX = svgWidth/2;
        var focusY = svgHeight/2;
        var dataSpread = svgWidth / influencedJSON.results.bindings.length;
        var svg = d3.select("#d3_timeline").append("svg");
        svg.attr("width", svgWidth);
        svg.attr("height", svgHeight);
        svg.attr("class", "main_svg");

        // Horizontal Timeline Bar
        svg.append("rect")
           .attr("x", svgHorizontalPadding)
           .attr("y", focusY)
           .attr("height", 1)
           .attr("width", svgWidth-svgHorizontalPadding*2)
           .attr("fill", "rgb(80, 80, 80)");

        // Birth year time-scale translation and axis
        var scale_before = d3.scale
                      .linear()
                      .domain([
                        d3.min(influencerData, function(d) { return getBirthYear(d) }),
                        d3.max(influencerData, function(d) { return getBirthYear(d) }) ])
                      .range([svgHorizontalPadding, focusX - svgHorizontalPadding]);

        // Birth year time-scale translation and axis
        var scale_after = d3.scale
                      .linear()
                      .domain([
                        d3.min(influencedData, function(d) { return getBirthYear(d) }),
                        d3.max(influencedData, function(d) { return getBirthYear(d) }) ])
                      .range([focusX + svgHorizontalPadding, svgWidth - svgHorizontalPadding]);

        // Influenced Names
        if(doInfluenced) {
          var names_after = svg.selectAll("text.after")
           .data(influencedData)
           .enter()
           .append("text")
           .attr("class", "after")
           .attr("fill", primaryColor)
           .text( function(d) {
              return d.influenceName.value + " (" + getBirthYear(d) + ")";
           })
           .attr("transform", function(d, i) {
               return "translate(" + 0 + ", focusY)rotate(45)";
           })
           .transition()
           .attr("transform", function(d, i) {
               return "translate(" + scale_after(getBirthYear(d)) + ", " + (focusY-5) + ")rotate(-45)";
           })
           .duration(1800)
           .ease();
        }

        //Influencer Names
        if(doInfluencer) {
          var names_before = svg.selectAll("text.before")
           .data(influencerData)
           .enter()
           .append("text")
           .attr("class", "before")
           .attr("fill", primaryColor)
           .text( function(d) {
              return d.influenceName.value + " (" + getBirthYear(d) + ")";
           })
           .attr("transform", function(d, i) {
               return "translate(" + 0 + ", focusY)rotate(45)";
           })
           .transition()
           .attr("transform", function(d, i) {
               return "translate(" + scale_before(getBirthYear(d)) + ", " + (focusY+20) + ")rotate(45)";
           })
           .duration(1800)
           .ease();
        }

        // Before Control Points
        function getXControlPointBefore(d) {
          var controlOffset = (focusX - scale_before(getBirthYear(d)))/2;
          // TODO: Add Randomness in here
          return scale_before(getBirthYear(d)) + controlOffset;// + Math.random() * 30;
        }

        function getYControlPointBefore(d) {
          var controlOffset = (focusX - scale_before(getBirthYear(d))) / 80;
          // TODO: Add Randomness in here
          // ((Math.random()*-10)+130)
          return focusY/controlOffset;
        }

        // After Control Points
        function getXControlPointAfter(d) {
          var controlOffset = ((scale_after(getBirthYear(d)) - focusX) / 2);
          return scale_after(getBirthYear(d)) - controlOffset;
        }

        function getYControlPointAfter(d) {
          var controlOffset = (scale_after(getBirthYear(d)) - focusX) / 80;
          return focusY + (focusY * (1 - (1/controlOffset)));
        }

        // If there are influencers for this individual, draw arcs from them to the individual node
        if(doInfluencer) {
          var paths_before = svg.selectAll("path.before")
            .data(influencerData)
            .enter()
            .append("path")
            .attr("class", "before")
            .attr("fill", "transparent")
            .attr("stroke", "rgb(200, 200, 200)")
            .attr("d", function(d, i) {
              return "M " + focusX + " " + focusY + " Q 0 0, 0 " + focusY;
            })
            .on("click", function(d, i) { highlight(d, i); })
            .transition()
            .attr("d", function(d, i) {
              // maybe do a call to a function for this
              return "M " + scale_before(getBirthYear(d)) + " " + focusY +
                     " Q " + getXControlPointBefore(d) + " " + getYControlPointBefore(d) +
                     " , " + focusX + " " + focusY;
            })
            .duration(2000)
            .ease();
        }

        // If there are people influenced by this individual, draw arcs from the individual node to them
        if(doInfluenced) {
          var paths_after = svg.selectAll("path.after")
            .data(influencedData)
            .enter()
            .append("path")
            .attr("class", "after")
            .attr("fill", "transparent")
            .attr("stroke", "rgb(200, 200, 200)")
            .attr("d", function(d, i) {
              return "M " + focusX + " " + focusY + " Q 0 0, 0 " + focusY;
            })
            // .attr("transform", function(d, i) {
            //    return "translate(0, 50)"; })
            .on("click", highlight)
            .transition()
            .attr("d", function(d, i) {
              // maybe do a call to a function for this
              return "M " + focusX + " " + focusY +
                     " Q " + getXControlPointAfter(d) + " " + getYControlPointAfter(d) +
                     " , " + scale_after(getBirthYear(d)) + " " + focusY;
            })
            .duration(2000)
            .ease();
        }

        // Temporary control point viz
        svg.selectAll("circle.controlpoint")
           .data(influencerData)
           .enter()
           .append("circle")
           .attr("class", "controlpoint")
           .attr("fill", "red")
           .attr("stroke", "rgb(255, 0, 0)")
           .attr("cx", function(d, i) { return getXControlPointBefore(d); })
           .attr("cy", function(d, i) { return getYControlPointBefore(d); })
           .attr("r", 5)
           .attr("fill-opacity", "0.5")
           .on("mouseover", function(d, i) { alert(getYControlPointBefore(d)); highlight(d, i); });

        svg.selectAll("circle.controlpoint_after")
           .data(influencedData)
           .enter()
           .append("circle")
           .attr("class", "controlpoint_after")
           .attr("fill", "red")
           .attr("stroke", "rgb(255, 0, 0)")
           .attr("cx", function(d, i) { return getXControlPointAfter(d); })
           .attr("cy", function(d, i) { return getYControlPointAfter(d); })
           .attr("r", 5)
           .attr("fill-opacity", "0.5")
           .on("mouseover", function(d, i) { alert(scale_after(getBirthYear(d))); highlight(d, i); });

        // Set up year axis (after drawing other elements to avoid overdraw)
        var axis = d3.svg.axis().scale(scale_after).ticks(influencedData.length).tickFormat(d3.format("1"));
        svg.append("g")
           .attr("class", "axis")
           .attr("transform", "translate(0," + svgHeight + ")")
           .call(axis);

        // Return just the year of the birth date
        function getBirthYear(d) {
          return dateFormatter(new Date(d.influenceBirth.value));
        }

        // Highlight selected arcs
        function highlight(d, i) {

          // Grab element and class name using index
          var element = d3.selectAll("path.before")[0][i];
          var className = d3.select(element).attr("class");

          // Clear appropriate set of paths based on class name
          if(className.indexOf("before") != -1) {
            d3.selectAll("path.before").classed("highlight", false);
          } else {
            d3.selectAll("path.after").classed("highlight", false);
          }

          // Currently, this causes all the paths inside of this one to not be clickable
          // Possible Veroni solution?
          d3.select(element).classed("highlight", true).moveToFront();
        }

        // Influenced Nodes
        if(doInfluenced) {
          var circles_after = svg.selectAll("circle.after")
           .data(influencedData)
           .enter()
           .append("circle")
           .attr("class", "after")
           // .attr("fill", "rgb(70, 130, 180")
           .attr("fill", "rgb(80, 80, 80)")
           .attr("r", "2")
           .attr("cy", focusY+0.5)
           .attr("cx", 0)
           .transition()
           .attr("cx", function(d, i) {
               // return i * dataSpread + 0.5;
               return scale_after(getBirthYear(d));
           })
           .duration(1800)
           .ease();
        }

        // Influenced Nodes
        if(doInfluencer) {
          var circles_before = svg.selectAll("circle.before")
           .data(influencerData)
           .enter()
           .append("circle")
           .attr("class", "before")
           .attr("fill", "rgb(80, 80, 80")
           .attr("r", "2")
           .attr("cy", focusY+0.5)
           .attr("cx", 0)
           .transition()
           .attr("cx", function(d, i) {
               // return i * dataSpread + 0.5;
               return scale_before(getBirthYear(d));
           })
           .duration(1800)
           .ease();
         }

        // Focused Node
        svg.append("circle")
           .attr("r", 10)
           .attr("cx", focusX)
           .attr("cy", focusY)
           .attr("stroke", primaryColor)
           .attr("fill", "transparent");
        svg.append("circle")
           .attr("r", 7)
           .attr("cx", focusX)
           .attr("cy", focusY)
           .attr("fill", primaryColor);

      </script>

    <% unless @influenced.nil? || @influencers.nil? %>

	  <h2><%= link_to params[:person_uri], '/people?person_uri=' + u(params[:person_uri]) %> influenced <%= @forward_count %> people:</h2>

	  <% @influenced.each do |i| %>
		&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size: 75%">&#9658;</span>&nbsp;&nbsp;<%= link_to i, '/people?person_uri=' + u(i) %><br/>
	  <% end %>

	  <br/>

	  <h2><%= link_to params[:person_uri], '/people?person_uri=' + u(params[:person_uri]) %> was influenced by <%= @backward_count %> people:</h2>

	  <% @influencers.each do |i| %>
		&nbsp;&nbsp;&nbsp;&nbsp;&#9668;&nbsp;&nbsp;<%= link_to i, '/people?person_uri=' + u(i) %><br/>
	  <% end %>

	  <br/>
      <br/>
      <br/>
      <br/>
    <% else %>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
      <br/>
    <% end %>
  </div>
</div>
